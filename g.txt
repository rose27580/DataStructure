#include <stdio.h>
#include <stdlib.h>

#define MAX 5

typedef struct {
    int items[MAX];
    int front, rear;
} CircularQueue;

void initializeQueue(CircularQueue *q) {
    q->front = -1;
    q->rear = -1;
}

int isFull(CircularQueue *q) {
    return (q->front == (q->rear + 1) % MAX);
}

int isEmpty(CircularQueue *q) {
    return (q->front == -1);
}

void enqueue(CircularQueue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full\n");
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear = (q->rear + 1) % MAX;
        q->items[q->rear] = value;
        printf("Inserted %d\n", value);
    }
}

int dequeue(CircularQueue *q) {
    int value;
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    } else {
        value = q->items[q->front];
        if (q->front == q->rear) {
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % MAX;
        }
        printf("Deleted %d\n", value);
        return value;
    }
}

int search(CircularQueue *q, int value) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return 0;
    }
    for (int i = q->front; i != q->rear; i = (i + 1) % MAX) {
        if (q->items[i] == value) {
            printf("Found %d at position %d\n", value, i);
            return 1;
        }
    }
    if (q->items[q->rear] == value) {
        printf("Found %d at position %d\n", value, q->rear);
        return 1;
    }
    printf("%d not found in the queue\n", value);
    return 0;
}

int main() {
    CircularQueue q;
    initializeQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    dequeue(&q);
    dequeue(&q);

    enqueue(&q, 60);

    search(&q, 30);
    search(&q, 70);

    return 0;
}
